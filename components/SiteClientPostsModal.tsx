import React, { useEffect, useState } from 'react';
import {
  Box,
  Button,
  Modal,
  Paper,
  Typography,
  Chip,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  CircularProgress,
  Divider,
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import EditIcon from '@mui/icons-material/Edit';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import ArticleIcon from '@mui/icons-material/Article';
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';
import BusinessIcon from '@mui/icons-material/Business';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import Link from 'next/link';

interface Post {
  id: number;
  title: string;
  content: string;
  submission_response: string;
  autogenerated: number;
  client_name: string;
  author_name: string;
  author_avatar: string;
  created: string;
  modified_at: string | null;
  user_name: string;
}

interface SiteClientPostsModalProps {
  open: boolean;
  onClose: () => void;
  siteId: number;
  siteName: string;
}

const SiteClientPostsModal: React.FC<SiteClientPostsModalProps> = ({
  open,
  onClose,
  siteId,
  siteName,
}) => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [stats, setStats] = useState<{ total_clients: number } | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchSitePosts = async () => {
      if (!open || !siteId) return;

      setIsLoading(true);
      setError('');

      try {
        const response = await fetch(`/api/superstar-sites/client-posts-by-site?siteId=${siteId}`);
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to fetch site posts');
        }

        const data = await response.json();
        setPosts(data.posts);
        setStats(data.stats);
      } catch (error: any) {
        console.error('Error fetching site posts:', error);
        setError(error.message || 'Failed to load site posts');
      } finally {
        setIsLoading(false);
      }
    };

    fetchSitePosts();
  }, [siteId, open]);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  // Function to safely render HTML content
  const renderHTML = (htmlContent: string) => {
    return { __html: htmlContent.substring(0, 150) + '...' };
  };

  return (
    <Modal open={open} onClose={onClose} aria-labelledby="site-client-posts-modal">
      <Paper
        sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: '90%',
          maxWidth: 900,
          maxHeight: '80vh',
          overflow: 'auto',
          p: 4,
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h5" component="h2">
            Client Posts for {siteName}
          </Typography>
          <IconButton onClick={onClose} size="small">
            <CloseIcon />
          </IconButton>
        </Box>

        <Box display="flex" alignItems="center" mb={2}>
          <Chip
            label={`${posts.length} Posts`}
            color="primary"
            variant="outlined"
            icon={<ArticleIcon />}
            sx={{ mr: 1 }}
          />
          <Chip
            label={`${stats?.total_clients || 0} Clients`}
            color="secondary"
            variant="outlined"
            icon={<BusinessIcon />}
          />
          <Box flexGrow={1} />
          <Button
            variant="outlined"
            color="primary"
            size="small"
            onClick={() => window.open(`/superstar-sites/${siteId}/client-posts`, '_blank')}
          >
            View Full Page
          </Button>
        </Box>

        <Divider sx={{ mb: 2 }} />

        {isLoading ? (
          <Box display="flex" justifyContent="center" py={4}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Box py={4} textAlign="center">
            <Typography color="error">{error}</Typography>
          </Box>
        ) : posts.length === 0 ? (
          <Box py={4} textAlign="center">
            <Typography variant="body1" color="text.secondary">
              No client posts found for this site
            </Typography>
          </Box>
        ) : (
          <List>
            {posts.map(post => (
              <Paper key={post.id} sx={{ mb: 2, p: 0 }} elevation={2}>
                <ListItem alignItems="flex-start" sx={{ pr: 12 }}>
                  <ListItemAvatar>
                    <Avatar>
                      {post.autogenerated === 1 ? <AutoAwesomeIcon /> : <ArticleIcon />}
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary={
                      <Typography variant="subtitle1" component="div">
                        {post.title}
                      </Typography>
                    }
                    secondary={
                      <React.Fragment>
                        {post.content && (
                          <Box mt={1} mb={1}>
                            <div dangerouslySetInnerHTML={renderHTML(post.content)} />
                          </Box>
                        )}
                        <Box display="flex" alignItems="center" mt={1} flexWrap="wrap">
                          <Chip
                            size="small"
                            label={post.autogenerated === 1 ? 'Auto' : 'Manual'}
                            color={post.autogenerated === 1 ? 'primary' : 'secondary'}
                            sx={{ mr: 1, mb: 1 }}
                          />
                          <Chip
                            size="small"
                            label={formatDate(post.created)}
                            variant="outlined"
                            sx={{ mr: 1, mb: 1 }}
                          />
                          {post.client_name && (
                            <Chip
                              size="small"
                              label={post.client_name}
                              variant="outlined"
                              color="primary"
                              sx={{ mb: 1 }}
                            />
                          )}
                        </Box>
                      </React.Fragment>
                    }
                  />
                  <ListItemSecondaryAction>
                    <Link href={`/editSuperStarPost/${post.id}`} passHref>
                      <IconButton edge="end" aria-label="edit" sx={{ mr: 1 }}>
                        <EditIcon />
                      </IconButton>
                    </Link>
                    <IconButton
                      edge="end"
                      aria-label="view"
                      component="a"
                      href={post.submission_response}
                      target="_blank"
                    >
                      <OpenInNewIcon />
                    </IconButton>
                  </ListItemSecondaryAction>
                </ListItem>
              </Paper>
            ))}
          </List>
        )}
      </Paper>
    </Modal>
  );
};

export default SiteClientPostsModal;
