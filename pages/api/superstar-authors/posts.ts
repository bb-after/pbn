import mysql from 'mysql2/promise';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { authorId } = req.query;
  
  if (!authorId) {
    return res.status(400).json({ error: 'Author ID is required' });
  }

  const dbConfig = {
    host: process.env.DB_HOST_NAME,
    user: process.env.DB_USER_NAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
  };

  const connection = await mysql.createConnection(dbConfig);

  try {
    // First, verify the author exists and get their details
    const [authors] = await connection.query(
      `
      SELECT 
        sa.*, 
        ss.domain as site_domain
      FROM 
        superstar_authors sa
      JOIN 
        superstar_sites ss ON sa.superstar_site_id = ss.id
      WHERE 
        sa.id = ?
      `,
      [authorId]
    );

    if (!Array.isArray(authors) || authors.length === 0) {
      await connection.end();
      return res.status(404).json({ error: 'Author not found' });
    }

    const author = authors[0] as any;

    // Get all posts associated with this author
    const [posts] = await connection.query(
      `
      SELECT 
        sss.id,
        sss.title,
        sss.content,
        sss.created_at,
        sss.modified_at,
        sss.submission_response,
        sss.autogenerated,
        sss.client_name,
        u.name as user_name
      FROM 
        superstar_site_submissions sss
      LEFT JOIN 
        users u ON sss.user_token = u.user_token
      WHERE 
        sss.superstar_author_id = ? AND
        sss.deleted_at IS NULL
      ORDER BY 
        sss.created_at DESC
      `,
      [authorId]
    );

    await connection.end();

    return res.status(200).json({ 
      author: {
        id: author.id,
        name: author.author_name,
        username: author.author_username,
        avatar: author.author_avatar,
        email: author.author_email,
        site_domain: author.site_domain
      },
      posts: posts 
    });
  } catch (error: any) {
    console.error('Error fetching author posts:', error);
    res.status(500).json({ error: 'Failed to fetch posts', details: error.message });

    if (connection && connection.end) {
      await connection.end();
    }
  }
}