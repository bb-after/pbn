import { NextApiRequest, NextApiResponse } from "next";
import mysql from "mysql2/promise";

// Database connection setup
const dbConfig = {
  host: process.env.DB_HOST_NAME,
  user: process.env.DB_USER_NAME,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { domain, login, hosting_site, topics, wpUsername, wpPassword, wpAppPassword } = req.body;

  if (!domain || !login || !hosting_site || !topics || !wpUsername || !wpPassword || !wpAppPassword) {
    return res.status(400).json({ error: "All fields are required" });
  }

  const connection = await mysql.createConnection(dbConfig);

  try {
    // Check if the domain already exists
    const [existingDomains]: [any[], any] = await connection.execute(
      'SELECT COUNT(*) as count FROM superstar_sites WHERE domain = ?',
      [domain]
    );

    if (existingDomains[0].count > 0) {
      return res.status(400).json({ error: "Domain already exists" });
    }

    // Insert new superstar_site
    const [result] = await connection.execute(
      'INSERT INTO superstar_sites (domain, login, hosting_site, autogenerated_count, manual_count, topics, hosting_site_password, application_password) VALUES (?, ?, ?, 0, 0, ?, ?, ?)',
      [domain, login, hosting_site, JSON.stringify(topics), wpPassword, wpAppPassword]
    );

    res.status(201).json({ message: "Superstar site created successfully", siteId: result.insertId });
  } catch (error) {
    console.error("Error creating superstar site:", error);
    res.status(500).json({ error: "Error creating superstar site" });
  } finally {
    await connection.end();
  }
}
