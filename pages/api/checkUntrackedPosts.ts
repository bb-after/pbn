import { NextApiRequest, NextApiResponse } from 'next';
import mysql from 'mysql2/promise';
import axios from 'axios';

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST_NAME,
  user: process.env.DB_USER_NAME,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
};

// Content analysis function
function analyzePostContent(postContent: any) {
  if (!postContent || !postContent.rendered) {
    return { isManual: true, reason: 'No content available for analysis' };
  }

  const content = postContent.rendered;

  // Count hyperlinks (a tags with href)
  const hyperlinkMatches = content.match(/<a[^>]+href[^>]*>/gi);
  const hyperlinkCount = hyperlinkMatches ? hyperlinkMatches.length : 0;

  // Count images (img tags)
  const imageMatches = content.match(/<img[^>]*>/gi);
  const imageCount = imageMatches ? imageMatches.length : 0;

  // Logic for determining manual vs automated
  if (hyperlinkCount >= 1) {
    return {
      isManual: true,
      reason: `Contains ${hyperlinkCount} hyperlink(s) - indicates manual content`,
    };
  }

  if (hyperlinkCount === 0 && imageCount === 1) {
    return {
      isManual: false,
      reason: `No hyperlinks and exactly 1 image - indicates automated content`,
    };
  }

  // Default to manual for other cases
  return {
    isManual: true,
    reason: `${hyperlinkCount} hyperlinks, ${imageCount} images - defaulting to manual`,
  };
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('Starting enhanced untracked posts check via API...');

    const connection = await mysql.createConnection(dbConfig);
    let totalImported = 0;
    const results: any[] = [];

    try {
      // Get all active superstar sites
      const [sites] = await connection.query(`
        SELECT id, domain, login, password, active 
        FROM superstar_sites 
        WHERE active = 1
      `);

      console.log(`Found ${(sites as any[]).length} active superstar sites.`);

      for (const site of sites as any[]) {
        try {
          console.log(`Processing site: ${site.domain} (ID: ${site.id})`);

          // Get existing submissions for this site
          const [submissions] = await connection.query(
            `
            SELECT id, superstar_site_id, title, submission_response, wordpress_post_id 
            FROM superstar_site_submissions 
            WHERE superstar_site_id = ? AND deleted_at IS NULL
          `,
            [site.id]
          );

          // Calculate date 7 days ago
          const sevenDaysAgo = new Date();
          sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
          const afterDate = sevenDaysAgo.toISOString();

          // Get WordPress posts from last 7 days
          const domain = site.domain.startsWith('http') ? site.domain : `https://${site.domain}`;

          const response = await axios.get(`${domain}/wp-json/wp/v2/posts`, {
            params: {
              per_page: 100,
              _fields: 'id,title,date,link,slug,author,content',
              after: afterDate,
            },
            auth: {
              username: site.login,
              password: site.password,
            },
            timeout: 20000,
          });

          const wpPosts = response.data;
          console.log(`Found ${wpPosts.length} posts from last 7 days on ${domain}`);

          // Create set of known post IDs
          const knownPostIds = new Set();
          (submissions as any[]).forEach(submission => {
            if (submission.wordpress_post_id) {
              knownPostIds.add(submission.wordpress_post_id);
            }
          });

          // Find untracked posts
          const untrackedPosts = wpPosts.filter((post: any) => !knownPostIds.has(post.id));

          let siteImported = 0;

          for (const post of untrackedPosts) {
            const analysis = analyzePostContent(post.content);
            const autogeneratedValue = analysis.isManual ? 0 : 1;
            const contentType = analysis.isManual ? 'manual' : 'automated';

            // Import the post
            await connection.query(
              `
              INSERT INTO superstar_site_submissions 
              (superstar_site_id, wordpress_post_id, title, submission_response, created, modified_at, autogenerated, retroactively_imported, notes) 
              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `,
              [
                site.id,
                post.id,
                post.title.rendered,
                post.link,
                new Date(post.date),
                new Date(),
                autogeneratedValue,
                1,
                `Retroactively imported by API on ${new Date().toISOString()}. Detected as ${contentType} content. Analysis: ${analysis.reason}`,
              ]
            );

            siteImported++;
            totalImported++;
          }

          if (untrackedPosts.length > 0) {
            results.push({
              site_id: site.id,
              domain: site.domain,
              imported: siteImported,
            });
          }
        } catch (siteError: any) {
          console.error(`Error processing site ${site.domain}:`, siteError.message);
        }
      }
    } finally {
      await connection.end();
    }

    console.log(`Enhanced untracked posts check completed. Imported ${totalImported} posts.`);

    return res.status(200).json({
      success: true,
      message: 'Enhanced untracked posts check completed successfully',
      totalImported,
      sitesProcessed: results.length,
      results,
      timestamp: new Date().toISOString(),
    });
  } catch (error: any) {
    console.error('Enhanced untracked posts check failed:', error);

    return res.status(500).json({
      success: false,
      error: 'Enhanced untracked posts check failed',
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
}
