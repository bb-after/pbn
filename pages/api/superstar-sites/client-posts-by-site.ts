import mysql from 'mysql2/promise';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { siteId } = req.query;

  if (!siteId) {
    return res.status(400).json({ error: 'Site ID is required' });
  }

  const dbConfig = {
    host: process.env.DB_HOST_NAME,
    user: process.env.DB_USER_NAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
  };

  const connection = await mysql.createConnection(dbConfig);

  try {
    // First, verify the site exists and get its details
    const [sites] = await connection.query(
      `
      SELECT 
        ss.*
      FROM 
        superstar_sites ss
      WHERE 
        ss.id = ?
      `,
      [siteId]
    );

    if (!Array.isArray(sites) || sites.length === 0) {
      await connection.end();
      return res.status(404).json({ error: 'Site not found' });
    }

    const site = sites[0] as any;

    // Get all posts associated with this site
    const [posts] = await connection.query(
      `
      SELECT 
        sss.id,
        sss.title,
        sss.content,
        sss.created,
        sss.modified_at,
        sss.submission_response,
        sss.autogenerated,
        sa.author_name,
        sa.author_avatar,
        c.client_name,
        u.name as user_name
      FROM 
        superstar_site_submissions sss
      LEFT JOIN 
        superstar_authors sa ON sss.superstar_author_id = sa.id
      LEFT JOIN 
        clients c ON sss.client_id = c.client_id
      LEFT JOIN 
        users u ON sss.user_token = u.user_token
      WHERE 
        sss.superstar_site_id = ? AND
        sss.client_id > 0 AND
        sss.deleted_at IS NULL
      ORDER BY 
        sss.created DESC
      `,
      [siteId]
    );

    // Get client post statistics
    const [clientStats] = await connection.query<mysql.RowDataPacket[]>(
      `
      SELECT 
        COUNT(DISTINCT sss.client_id) as total_clients
      FROM 
        superstar_site_submissions sss
      WHERE 
        sss.superstar_site_id = ? AND
        sss.deleted_at IS NULL AND
        sss.client_id IS NOT NULL
      `,
      [siteId]
    );

    await connection.end();

    return res.status(200).json({
      site: {
        id: site.id,
        name: site.name,
        domain: site.domain,
        description: site.description,
      },
      posts: posts,
      stats: clientStats && clientStats.length > 0 ? clientStats[0] : { total_clients: 0 },
    });
  } catch (error: any) {
    console.error('Error fetching site posts:', error);
    res.status(500).json({ error: 'Failed to fetch posts', details: error.message });

    if (connection && connection.end) {
      await connection.end();
    }
  }
}
