// pages/api/superstar-site-submissions.ts

import mysql, { RowDataPacket } from 'mysql2/promise';
import { NextApiRequest, NextApiResponse } from 'next';

// Define the type for the total count query result
interface TotalCountRow extends RowDataPacket {
  total: number;
}

// eslint-disable-next-line import/no-anonymous-default-export
export default async (req: NextApiRequest, res: NextApiResponse) => {
  // Define your MySQL connection options
  const dbConfig = {
    host: process.env.DB_HOST_NAME,
    user: process.env.DB_USER_NAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
  };

  // Create a MySQL connection
  const connection = await mysql.createConnection(dbConfig);

  try {
    // Check for query parameters
    const searchQuery = req.query.search as string | undefined;
    const userToken = Array.isArray(req.query.userToken)
      ? req.query.userToken[0]
      : req.query.userToken;
    const authorId = Array.isArray(req.query.authorId) ? req.query.authorId[0] : req.query.authorId;
    const autogenerated = req.query.autogenerated as string | undefined;
    const clientId = Array.isArray(req.query.clientId) ? req.query.clientId[0] : req.query.clientId;

    const page = parseInt(typeof req.query.page === 'string' ? req.query.page : '0', 10) || 0;
    const rowsPerPage =
      parseInt(typeof req.query.rowsPerPage === 'string' ? req.query.rowsPerPage : '10', 10) || 10;
    const offset = page * rowsPerPage;

    let whereClauses = ['deleted_at IS NULL']; // Always include the check for non-deleted records
    let queryConfig: (string | number)[] = [];

    if (searchQuery) {
      whereClauses.push('title LIKE ?');
      queryConfig.push(`%${searchQuery}%`);
    }

    if (userToken) {
      whereClauses.push('superstar_site_submissions.user_token = ?');
      queryConfig.push(userToken);
    }

    // Add filter for author
    if (authorId) {
      whereClauses.push('superstar_site_submissions.superstar_author_id = ?');
      queryConfig.push(authorId);
    }

    // Add filter for autogenerated
    if (autogenerated !== undefined) {
      whereClauses.push('superstar_site_submissions.autogenerated = ?');
      queryConfig.push(autogenerated === 'true' ? 1 : 0);
    }

    // Add filter for client ID
    if (clientId) {
      whereClauses.push('superstar_site_submissions.client_id = ?');
      queryConfig.push(clientId);
    }

    const whereStatement = whereClauses.join(' AND ');
    const query = `
      SELECT 
        superstar_site_submissions.*, 
        users.name,
        sa.author_name, 
        sa.author_username, 
        sa.author_email, 
        sa.author_avatar,
        sa.wp_author_id,
        c.client_name,
        ss.domain as site_name,
        ss.domain as site_domain
      FROM 
        superstar_site_submissions 
      LEFT JOIN 
        users ON users.user_token = superstar_site_submissions.user_token 
      LEFT JOIN 
        superstar_authors sa ON sa.id = superstar_site_submissions.superstar_author_id
      LEFT JOIN
        clients c ON c.client_id = superstar_site_submissions.client_id
      LEFT JOIN
        superstar_sites ss ON ss.id = superstar_site_submissions.superstar_site_id
      WHERE 
        ${whereStatement} 
      ORDER BY 
        superstar_site_submissions.id DESC 
      LIMIT ? 
      OFFSET ?
    `;

    queryConfig.push(rowsPerPage, offset);

    const [rows] = await connection.query(query, queryConfig);

    let totalCountQuery = 'SELECT COUNT(*) as total FROM superstar_site_submissions';
    if (whereClauses.length > 0) {
      totalCountQuery += ` WHERE ${whereStatement}`;
    }

    const totalCountConfig = queryConfig.slice(0, -2); // Remove limit and offset for total count query
    const [totalCountRows] = await connection.query<TotalCountRow[]>(
      totalCountQuery,
      totalCountConfig
    );
    const totalCount = totalCountRows[0]?.total;

    // Get unique clients with their submission counts
    const [clients] = await connection.execute(`
      SELECT 
        c.client_id,
        c.client_name,
        COUNT(ss.id) as superstar_posts
      FROM clients c
      LEFT JOIN superstar_site_submissions ss ON c.client_id = ss.client_id
      WHERE c.is_active = 1
      GROUP BY c.client_id, c.client_name
      ORDER BY c.client_name ASC
    `);

    // Get site statistics for client posts
    const [siteStats] = await connection.execute(`
      SELECT 
        ss.id as site_id,
        ss.domain as site_domain,
        COUNT(sss.id) as total_posts,
        COUNT(DISTINCT sss.client_id) as unique_clients
      FROM superstar_sites ss
      LEFT JOIN superstar_site_submissions sss ON ss.id = sss.superstar_site_id
      WHERE sss.deleted_at IS NULL
      AND sss.client_id > 0
      GROUP BY ss.id, ss.domain
      ORDER BY ss.domain ASC
    `);

    // Close the MySQL connection
    await connection.end();

    // Send the data as a JSON response
    res.status(200).json({ rows, totalCount, clients, siteStats });
  } catch (error: any) {
    console.error(error);
    res.status(500).json({ error: 'Failed to fetch data', details: error.message });
    // Close the MySQL connection in case of an error, but only if it's still open
    if (connection && connection.end) {
      await connection.end();
    }
  }
};
