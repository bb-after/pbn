import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Button,
  Chip,
} from "@mui/material";
import { useRouter } from "next/router";
import { styled } from "@mui/system";

const colors = [
  "#e57373",
  "#f06292",
  "#ba68c8",
  "#9575cd",
  "#7986cb",
  "#64b5f6",
  "#4fc3f7",
  "#4dd0e1",
  "#4db6ac",
  "#81c784",
  "#aed581",
];

const MyChip = styled(Chip)(({ theme }) => ({
  margin: theme.spacing(0.5),
}));

interface SuperstarSite {
  id: number;
  domain: string;
  hosting_site: string;
  autogenerated_count: number;
  manual_count: number;
  topics: string[];
}

const SuperstarSites: React.FC = () => {
  const [sites, setSites] = useState<SuperstarSite[]>([]);
  const router = useRouter();

  useEffect(() => {
    const fetchSites = async () => {
      try {
        const response = await axios.get<SuperstarSite[]>(
          "/api/superstar-sites"
        );
        const parsedData = response.data.map((site) => ({
          ...site,
          topics: Array.isArray(site.topics)
            ? site.topics
            : site.topics.split(","),
        }));
        setSites(parsedData);
      } catch (error) {
        console.error("Error fetching sites:", error);
      }
    };

    fetchSites();
  }, []);

  const handleEdit = (id: number) => {
    router.push(`/superstar-sites/${id}/edit`);
  };

  return (
    <TableContainer component={Paper}>
      <Typography variant="h4" gutterBottom>
        Superstar Sites
      </Typography>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>ID</TableCell>
            <TableCell>Domain</TableCell>
            <TableCell>Hosting Site</TableCell>
            <TableCell>Auto-generated Posts</TableCell>
            <TableCell>Manual Posts</TableCell>
            <TableCell>Topics</TableCell>
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {sites.map((site) => (
            <TableRow key={site.id}>
              <TableCell>{site.id}</TableCell>
              <TableCell>{site.domain}</TableCell>
              <TableCell>{site.hosting_site}</TableCell>
              <TableCell>{site.autogenerated_count}</TableCell>
              <TableCell>{site.manual_count}</TableCell>
              <TableCell>
                {site.topics.map((topic, index) => (
                  <MyChip
                    key={index}
                    label={topic}
                    style={{
                      backgroundColor: colors[index % colors.length],
                      color: "#fff",
                    }}
                  />
                ))}
              </TableCell>
              <TableCell>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={() => handleEdit(site.id)}
                >
                  Edit
                </Button>
                <Button variant="contained" color="secondary">
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default SuperstarSites;
