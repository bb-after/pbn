import React, { useState } from "react";
import { useRouter } from "next/router";
import axios from "axios";
import {
  Typography,
  TextField,
  Button,
  Container,
  Box,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  CircularProgress,
} from "@mui/material";
import Autocomplete from "@mui/lab/Autocomplete";
import useValidateUserToken from "hooks/useValidateUserToken";
import LayoutContainer from "components/LayoutContainer";
import StyledHeader from "components/StyledHeader";

interface SuperstarSite {
  id: number;
  domain: string;
  hosting_site: string;
  autogenerated_count: number;
  manual_count: number;
  topics: string[];
  login: string;
  hosting_site_password: string;
  application_password: string;
}

const NewSite: React.FC = () => {
  const router = useRouter();
  const [domain, setDomain] = useState<string>("");
  const [topics, setTopics] = useState<string[]>([]);
  const [wpUsername, setWpUsername] = useState<string>("");
  const [wpPassword, setWpPassword] = useState<string>("");
  const [wpAppPassword, setWpAppPassword] = useState<string>("");
  const [active, setActive] = useState<string>("1");
  const [errorMessage, setErrorMessage] = useState<string>("");
  const { isLoading, isValidUser } = useValidateUserToken();

  const handleSave = async () => {
    if (!domain.startsWith("https://")) {
      setErrorMessage("Domain must start with 'https://'");
      return;
    }

    try {
      await axios.post(`/api/create-superstar-site`, {
        domain,
        topics,
        wpUsername,
        wpPassword,
        wpAppPassword,
        active: active === "1" ? 1 : 0,
      });
      router.push("/superstar-sites");
    } catch (error) {
      console.error("Error saving site:", error);
      setErrorMessage("Error saving site. Please try again.");
    }
  };

  if (isLoading) {
    return (
      <LayoutContainer>
        <StyledHeader />
        <Box
          display="flex"
          justifyContent="center"
          alignItems="center"
          height="100vh"
        >
          <CircularProgress />
        </Box>
      </LayoutContainer>
    );
  }

  if (!isValidUser) {
    return (
      <LayoutContainer>
        <StyledHeader />
        <Box
          display="flex"
          justifyContent="center"
          alignItems="center"
          height="100vh"
        >
          <Typography variant="h6">
            Unauthorized access. Please log in.
          </Typography>
        </Box>
      </LayoutContainer>
    );
  }

  return (
    <LayoutContainer>
      <StyledHeader />
      <Container>
        <Box my={4}>
          <Typography variant="h4" gutterBottom>
            New Superstar Site
          </Typography>
          <TextField
            variant="outlined"
            label="Domain - eg - https://bobscabinets.org"
            fullWidth
            margin="normal"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
          />
          {errorMessage && (
            <Typography color="error" variant="body1">
              {errorMessage}
            </Typography>
          )}
          <Autocomplete
            multiple
            freeSolo
            options={[]}
            value={topics}
            onChange={(event, newValue) => setTopics(newValue as string[])}
            renderInput={(params) => (
              <TextField
                {...params}
                variant="outlined"
                label="Topics"
                placeholder="Add topics"
              />
            )}
          />
          <TextField
            variant="outlined"
            label="WordPress Username"
            fullWidth
            margin="normal"
            value={wpUsername}
            onChange={(e) => setWpUsername(e.target.value)}
          />
          <TextField
            variant="outlined"
            label="WordPress Password"
            type="password"
            fullWidth
            margin="normal"
            value={wpPassword}
            onChange={(e) => setWpPassword(e.target.value)}
          />
          <TextField
            variant="outlined"
            label="WordPress Application Password"
            type="password"
            fullWidth
            margin="normal"
            value={wpAppPassword}
            onChange={(e) => setWpAppPassword(e.target.value)}
          />
          <FormControl fullWidth margin="normal">
            <InputLabel id="active-label">Status</InputLabel>
            <Select
              labelId="active-label"
              value={active}
              onChange={(e) => setActive(e.target.value as string)}
            >
              <MenuItem value="1">Active</MenuItem>
              <MenuItem value="0">Inactive</MenuItem>
            </Select>
          </FormControl>
          <Box mt={2}>
            <Button variant="contained" color="primary" onClick={handleSave}>
              Save
            </Button>
          </Box>
        </Box>
      </Container>
    </LayoutContainer>
  );
};

export default NewSite;
