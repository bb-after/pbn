import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import axios from "axios";
import {
  Typography,
  TextField,
  Button,
  Container,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";
import Autocomplete from "@mui/lab/Autocomplete";

interface SuperstarSite {
  id: number;
  domain: string;
  hosting_site: string;
  autogenerated_count: number;
  manual_count: number;
  topics: string[];
  login: string;
  active: string;
  hosting_site_password: string;
  application_password: string;
  custom_prompt: string;
}

const EditTopics: React.FC = () => {
  const router = useRouter();
  const { id } = router.query;
  const [site, setSite] = useState<SuperstarSite | null>(null);
  const [topics, setTopics] = useState<string[]>([]);
  const [wpUsername, setWpUsername] = useState<string>("");
  const [wpPassword, setWpPassword] = useState<string>("");
  const [wpAppPassword, setWpAppPassword] = useState<string>("");
  const [active, setActive] = useState<string>("1");
  const [customPrompt, setCustomPrompt] = useState<string>("");

  useEffect(() => {
    if (id) {
      const fetchSite = async () => {
        try {
          const response = await axios.get<SuperstarSite>(
            `/api/superstar-sites/${id}`
          );
          const siteData = response.data;
          setSite(siteData);
          setTopics(siteData.topics);
          setWpUsername(siteData.login || "");
          setWpPassword(siteData.hosting_site_password || "");
          setWpAppPassword(siteData.application_password || "");
          setActive(siteData.active || "1");
          setCustomPrompt(siteData.custom_prompt || "");
        } catch (error) {
          console.error("Error fetching site:", error);
        }
      };

      fetchSite();
    }
  }, [id]);

  const handleSave = async () => {
    try {
      await axios.put(`/api/superstar-sites/${id}`, {
        topics,
        wpUsername,
        wpPassword,
        wpAppPassword,
        active,
        customPrompt,
      });
      router.push("/superstar-sites");
    } catch (error) {
      console.error("Error saving topics:", error);
    }
  };

  return (
    <Container>
      <Box my={4}>
        <Typography variant="h4" gutterBottom>
          Edit Site: {site?.domain}
        </Typography>
        <Autocomplete
          multiple
          freeSolo
          options={[]}
          value={topics}
          onChange={(event, newValue) => setTopics(newValue as string[])}
          renderInput={(params) => (
            <TextField
              {...params}
              variant="outlined"
              label="Topics"
              placeholder="Add topics"
            />
          )}
        />
        <TextField
          variant="outlined"
          label="WordPress Username"
          fullWidth
          margin="normal"
          value={wpUsername}
          onChange={(e) => setWpUsername(e.target.value)}
        />
        <TextField
          variant="outlined"
          label="WordPress Password"
          type="password"
          fullWidth
          margin="normal"
          value={wpPassword}
          onChange={(e) => setWpPassword(e.target.value)}
        />
        <TextField
          variant="outlined"
          label="WordPress Application Password"
          type="password"
          fullWidth
          margin="normal"
          value={wpAppPassword}
          onChange={(e) => setWpAppPassword(e.target.value)}
        />

        <TextField
          variant="outlined"
          label="Custom Prompt"
          multiline
          rows={4}
          fullWidth
          margin="normal"
          value={customPrompt}
          onChange={(e) => setCustomPrompt(e.target.value)}
          placeholder="Enter a custom prompt to override the default prompt when generating content for this site"
          helperText="Leave empty to use the default prompt"
        />

        <FormControl fullWidth margin="normal">
          <InputLabel id="active-label">Status</InputLabel>
          <Select
            labelId="active-label"
            value={active}
            onChange={(e) => setActive(e.target.value as string)}
          >
            <MenuItem value="1">Active</MenuItem>
            <MenuItem value="0">Inactive</MenuItem>
          </Select>
        </FormControl>

        <Box mt={2}>
          <Button variant="contained" color="primary" onClick={handleSave}>
            Save
          </Button>
        </Box>
      </Box>
    </Container>
  );
};

export default EditTopics;
