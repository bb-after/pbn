import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import {
  Typography,
  TextField,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Grid,
} from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import IndustryMappingSelector from '../../../components/IndustryMappingSelector';
import RegionMappingSelector from '../../../components/RegionMappingSelector';
import useValidateUserToken from 'hooks/useValidateUserToken';
import {
  IntercomLayout,
  ThemeProvider,
  ToastProvider,
  IntercomCard,
  IntercomButton,
} from '../../../components/ui';
import UnauthorizedAccess from '../../../components/UnauthorizedAccess';

interface Industry {
  industry_id: number;
  industry_name: string;
}

interface Region {
  region_id: number;
  region_name: string;
  region_type: string;
  parent_region_id: number | null;
  sub_regions?: Region[];
}

interface SuperstarSite {
  id: number;
  domain: string;
  hosting_site: string;
  autogenerated_count: number;
  manual_count: number;
  topics: string[];
  login: string;
  active: string;
  hosting_site_password: string;
  application_password: string;
  custom_prompt: string;
  industries?: Industry[];
  regions?: Region[];
}

function EditSitePage() {
  const router = useRouter();
  const { id } = router.query;
  const [site, setSite] = useState<SuperstarSite | null>(null);
  const [topics, setTopics] = useState<string[]>([]);
  const [wpUsername, setWpUsername] = useState<string>('');
  const [wpPassword, setWpPassword] = useState<string>('');
  const [wpAppPassword, setWpAppPassword] = useState<string>('');
  const [active, setActive] = useState<string>('1');
  const [customPrompt, setCustomPrompt] = useState<string>('');

  // For region and industry mappings
  const [industries, setIndustries] = useState<Industry[]>([]);
  const [regions, setRegions] = useState<Region[]>([]);
  const [selectedIndustries, setSelectedIndustries] = useState<Industry[]>([]);
  const [selectedRegions, setSelectedRegions] = useState<Region[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const { isLoading: isAuthLoading, isValidUser } = useValidateUserToken();

  // Helper function to flatten nested regions for Autocomplete
  const flattenRegions = (regions: Region[]): Region[] => {
    let result: Region[] = [];

    for (const region of regions) {
      result.push(region);

      if (region.sub_regions && region.sub_regions.length > 0) {
        result = [...result, ...flattenRegions(region.sub_regions)];
      }
    }

    return result;
  };

  // Load industries and regions data
  useEffect(() => {
    const fetchMappingData = async () => {
      setLoading(true);
      try {
        const [industriesRes, regionsRes] = await Promise.all([
          axios.get('/api/industries'),
          axios.get('/api/geo-regions?with_hierarchy=true'),
        ]);
        setIndustries(industriesRes.data);
        setRegions(regionsRes.data);
      } catch (error) {
        console.error('Error fetching mapping data:', error);
      } finally {
        // setLoading(false);
      }
    };

    fetchMappingData();
  }, []);

  useEffect(() => {
    if (id) {
      const fetchSite = async () => {
        try {
          const response = await axios.get<SuperstarSite>(`/api/superstar-sites/${id}`);
          const siteData = response.data;
          setSite(siteData);
          setTopics(siteData.topics);
          setWpUsername(siteData.login || '');
          setWpPassword(siteData.hosting_site_password || '');
          setWpAppPassword(siteData.application_password || '');
          setActive(siteData.active || '1');
          setCustomPrompt(siteData.custom_prompt || '');

          // Set selected industries and regions if they exist
          if (siteData.industries) {
            setSelectedIndustries(siteData.industries);
          }

          if (siteData.regions) {
            setSelectedRegions(siteData.regions);
          }
        } catch (error) {
          console.error('Error fetching site:', error);
        } finally {
          setLoading(false);
        }
      };

      fetchSite();
    }
  }, [id]);

  const handleSave = async () => {
    try {
      await axios.put(`/api/superstar-sites/${id}`, {
        topics,
        wpUsername,
        wpPassword,
        wpAppPassword,
        active,
        customPrompt,
        // Add region and industry mappings
        industries: selectedIndustries.map(i => i.industry_id),
        regions: selectedRegions.map(r => r.region_id),
      });
      router.push('/superstar-sites');
    } catch (error) {
      console.error('Error saving site data:', error);
    }
  };

  const handleCancel = () => {
    router.push('/superstar-sites');
  };

  if (isAuthLoading || loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!isValidUser) {
    return <UnauthorizedAccess />;
  }

  return (
    <IntercomLayout
      title={`Edit Site: ${site?.domain}`}
      breadcrumbs={[{ label: 'Superstar Sites', href: '/superstar-sites' }, { label: 'Edit Site' }]}
      actions={
        <Box display="flex" gap={2}>
          <IntercomButton variant="secondary" onClick={handleCancel}>
            Cancel
          </IntercomButton>
          <IntercomButton variant="primary" onClick={handleSave}>
            Save Changes
          </IntercomButton>
        </Box>
      }
    >
      <Grid container spacing={3}>
        <Grid item xs={12} md={8}>
          <IntercomCard title="Site Details">
            <Box p={3}>
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <Autocomplete
                    multiple
                    freeSolo
                    options={[]}
                    value={topics}
                    onChange={(event, newValue) => setTopics(newValue as string[])}
                    renderInput={params => (
                      <TextField
                        {...params}
                        variant="outlined"
                        label="Topics"
                        placeholder="Add topics"
                      />
                    )}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    variant="outlined"
                    label="WordPress Username"
                    fullWidth
                    value={wpUsername}
                    onChange={e => setWpUsername(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    variant="outlined"
                    label="WordPress Password"
                    type="password"
                    fullWidth
                    value={wpPassword}
                    onChange={e => setWpPassword(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    variant="outlined"
                    label="WordPress Application Password"
                    type="password"
                    fullWidth
                    value={wpAppPassword}
                    onChange={e => setWpAppPassword(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    variant="outlined"
                    label="Custom Prompt"
                    multiline
                    rows={4}
                    fullWidth
                    value={customPrompt}
                    onChange={e => setCustomPrompt(e.target.value)}
                    placeholder="Enter a custom prompt to override the default prompt for this site"
                    helperText="Leave empty to use the default prompt."
                  />
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel id="active-label">Status</InputLabel>
                    <Select
                      labelId="active-label"
                      label="Status"
                      value={active}
                      onChange={e => setActive(e.target.value as string)}
                    >
                      <MenuItem value="1">Active</MenuItem>
                      <MenuItem value="0">Inactive</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Box>
          </IntercomCard>
        </Grid>
        <Grid item xs={12} md={4}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <IntercomCard>
                <IndustryMappingSelector
                  selectedIndustries={selectedIndustries}
                  onChange={setSelectedIndustries}
                  description="Select industries that this client specializes in."
                />
              </IntercomCard>
            </Grid>
            <Grid item xs={12}>
              <IntercomCard>
                <RegionMappingSelector
                  selectedRegions={selectedRegions}
                  onChange={setSelectedRegions}
                  description="Select geographic regions that this client targets."
                />
              </IntercomCard>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </IntercomLayout>
  );
}

export default function EditTopics() {
  return (
    <ToastProvider>
      <EditSitePage />
    </ToastProvider>
  );
}
