import { useEffect, useState, useCallback } from 'react';
import axios from 'axios';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TableSortLabel,
  Paper,
  Chip,
  Box,
  Link,
  CircularProgress,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Grid,
} from '@mui/material';
import { useRouter } from 'next/router';
import {
  IntercomLayout,
  ThemeProvider,
  ToastProvider,
  IntercomCard,
  IntercomButton,
} from '../../components/ui';
import UnauthorizedAccess from '../../components/UnauthorizedAccess';
import useValidateUserToken from 'hooks/useValidateUserToken';
import { handleWPLogin } from '../../utils/handle-wp-login';
import { colors } from '../../utils/colors';
import debounce from 'lodash/debounce';

interface ClientPostInfo {
  clientId: number;
  clientName: string;
  postCount: number;
}

interface SuperstarSite {
  id: number;
  domain: string;
  hosting_site: string;
  manual_count: number;
  autogenerated_count: number;
  author_count: number;
  topics: string | string[];
  login: string;
  custom_prompt?: string;
  client_post_data?: string;
  clientPosts?: ClientPostInfo[];
}

type SortField = 'manual_count' | 'autogenerated_count' | 'author_count' | 'domain' | 'id';
type SortOrder = 'asc' | 'desc';

function SuperstarSitesPage() {
  const [sites, setSites] = useState<SuperstarSite[]>([]);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [isFetching, setIsFetching] = useState(false);
  const [sortField, setSortField] = useState<SortField>('domain');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [sortedAndFilteredSites, setSortedAndFilteredSites] = useState<SuperstarSite[]>([]);
  const [customPromptFilter, setCustomPromptFilter] = useState<string>('all');
  const [clients, setClients] = useState<{ client_id: number; client_name: string }[]>([]);
  const [selectedClientId, setSelectedClientId] = useState<string>('');

  const router = useRouter();
  const { isLoading: isAuthLoading, isValidUser } = useValidateUserToken();
  const [active, setActive] = useState<string>('1');

  // Debounced search handler
  const debouncedSetSearch = useCallback(
    debounce((value: string) => {
      setDebouncedSearchQuery(value);
    }, 500),
    []
  );

  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    debouncedSetSearch(e.target.value);
  };

  // Sort handler
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortOrder('asc');
    }
  };

  // Sort function
  const sortSites = (sites: SuperstarSite[]) => {
    return [...sites].sort((a, b) => {
      const multiplier = sortOrder === 'asc' ? 1 : -1;
      if (sortField === 'domain') {
        return multiplier * a.domain.localeCompare(b.domain);
      }
      return multiplier * ((a[sortField] || 0) - (b[sortField] || 0));
    });
  };

  // Update sorting and filtering when sort parameters change
  useEffect(() => {
    if (sites.length > 0) {
      const filteredSites = filterSites(sites);
      setSortedAndFilteredSites(sortSites(filteredSites));
    }
  }, [sortField, sortOrder]);

  // Filter function
  const filterSites = (sites: SuperstarSite[]) => {
    return sites.filter(site => {
      // Filter by custom prompt
      const promptMatch =
        customPromptFilter === 'all' ||
        (customPromptFilter === 'yes' && !!site.custom_prompt) ||
        (customPromptFilter === 'no' && !site.custom_prompt);

      // Filter by client ID
      const clientMatch =
        !selectedClientId ||
        (site.clientPosts &&
          site.clientPosts.some(client => client.clientId === parseInt(selectedClientId)));

      return promptMatch && clientMatch;
    });
  };

  useEffect(() => {
    // Function to fetch clients
    const fetchClients = async () => {
      try {
        const response = await axios.get('/api/clients?active=true');
        setClients(response.data);
      } catch (error) {
        console.error('Error fetching clients:', error);
      }
    };

    const fetchSites = async () => {
      setIsFetching(true);
      try {
        const response = await axios.get<SuperstarSite[]>(
          `/api/superstar-sites?search=${debouncedSearchQuery}&active=${active}`
        );

        const parsedData = response.data.map(site => {
          // Parse client post data and topics
          const clientPostArray: ClientPostInfo[] = [];

          if (site.client_post_data) {
            const clientPosts = site.client_post_data.split('|');
            clientPosts.forEach(clientPost => {
              const [clientId, clientName, postCount] = clientPost.split(':');
              clientPostArray.push({
                clientId: parseInt(clientId),
                clientName,
                postCount: parseInt(postCount),
              });
            });
          }

          return {
            ...site,
            clientPosts: clientPostArray,
            topics: Array.isArray(site.topics)
              ? site.topics
              : site.topics
                ? site.topics.split(',')
                : [],
          };
        });
        setSites(parsedData);

        // Apply filters and sorting
        const filteredSites = filterSites(parsedData);
        setSortedAndFilteredSites(sortSites(filteredSites));
      } catch (error) {
        console.error('Error fetching sites:', error);
      } finally {
        setIsFetching(false);
        setIsLoading(false);
      }
    };

    if (isValidUser) {
      fetchSites();
      fetchClients();
    }
  }, [isValidUser, debouncedSearchQuery, active]);

  // Update filtered sites when client selection changes
  useEffect(() => {
    // No need to fetch again, just reapply filters
    const filteredSites = filterSites(sites);
    setSortedAndFilteredSites(sortSites(filteredSites));
  }, [selectedClientId, customPromptFilter]);

  const handleEdit = (id: number) => {
    router.push(`/superstar-sites/${id}/edit`);
  };

  if (isAuthLoading || isLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!isValidUser) {
    return <UnauthorizedAccess />;
  }

  const pageActions = (
    <>
      <IntercomButton
        variant="secondary"
        onClick={() => router.push('/superstar-post-capture-form')}
      >
        Capture WordPress Post
      </IntercomButton>
      <IntercomButton variant="primary" onClick={() => router.push('/superstar-sites/new')}>
        New Site
      </IntercomButton>
    </>
  );

  return (
    <IntercomLayout
      title="Superstar Sites"
      breadcrumbs={[{ label: 'Superstar Sites' }]}
      actions={pageActions}
    >
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <IntercomCard>
            <Box p={3}>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={6} md={2}>
                  <FormControl fullWidth>
                    <InputLabel id="active-label">Status</InputLabel>
                    <Select
                      labelId="active-label"
                      value={active}
                      onChange={e => setActive(e.target.value as string)}
                      label="Status"
                    >
                      <MenuItem value="1">Active</MenuItem>
                      <MenuItem value="0">Inactive</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                  <FormControl fullWidth>
                    <InputLabel id="custom-prompt-label">Custom Prompt</InputLabel>
                    <Select
                      labelId="custom-prompt-label"
                      value={customPromptFilter}
                      onChange={e => setCustomPromptFilter(e.target.value)}
                      label="Custom Prompt"
                    >
                      <MenuItem value="all">All</MenuItem>
                      <MenuItem value="yes">Has Custom Prompt</MenuItem>
                      <MenuItem value="no">No Custom Prompt</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <FormControl fullWidth>
                    <InputLabel id="client-filter-label">Client</InputLabel>
                    <Select
                      labelId="client-filter-label"
                      value={selectedClientId}
                      onChange={e => setSelectedClientId(e.target.value)}
                      label="Client"
                    >
                      <MenuItem value="">All Clients</MenuItem>
                      {clients.map(client => (
                        <MenuItem key={client.client_id} value={client.client_id}>
                          {client.client_name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={5}>
                  <TextField
                    variant="outlined"
                    label="Search by Domain"
                    fullWidth
                    value={searchQuery}
                    onChange={handleSearchChange}
                  />
                </Grid>
              </Grid>
            </Box>

            {isFetching && (
              <Box display="flex" justifyContent="center" my={2}>
                <CircularProgress size={24} />
              </Box>
            )}

            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>
                      <TableSortLabel
                        active={sortField === 'id'}
                        direction={sortField === 'id' ? sortOrder : 'asc'}
                        onClick={() => handleSort('id')}
                      >
                        ID
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={sortField === 'domain'}
                        direction={sortField === 'domain' ? sortOrder : 'asc'}
                        onClick={() => handleSort('domain')}
                      >
                        Domain
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={sortField === 'manual_count'}
                        direction={sortField === 'manual_count' ? sortOrder : 'asc'}
                        onClick={() => handleSort('manual_count')}
                      >
                        Total Posts
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={sortField === 'manual_count'}
                        direction={sortField === 'manual_count' ? sortOrder : 'asc'}
                        onClick={() => handleSort('manual_count')}
                      >
                        Manual Posts
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>
                      <TableSortLabel
                        active={sortField === 'author_count'}
                        direction={sortField === 'author_count' ? sortOrder : 'asc'}
                        onClick={() => handleSort('author_count')}
                      >
                        Authors
                      </TableSortLabel>
                    </TableCell>
                    <TableCell>Topics</TableCell>
                    <TableCell>Custom Prompt</TableCell>
                    <TableCell>Client Posts</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {sortedAndFilteredSites.map(site => (
                    <TableRow key={site.id}>
                      <TableCell>{site.id}</TableCell>
                      <TableCell>
                        <Link href={site.domain} target="_blank" rel="noopener noreferrer">
                          {site.domain}
                        </Link>
                      </TableCell>
                      <TableCell>
                        {(site.autogenerated_count || 0) + (site.manual_count || 0)}
                      </TableCell>
                      <TableCell>
                        {site.manual_count > 0 ? (
                          <Link
                            href={`/superstar-site-submissions?siteId=${site.id}&autogenerated=false`}
                            style={{
                              cursor: 'pointer',
                              textDecoration: 'underline',
                              color: '#1976d2',
                            }}
                          >
                            {site.manual_count}
                          </Link>
                        ) : (
                          site.manual_count
                        )}
                      </TableCell>
                      <TableCell>
                        <Box display="flex" alignItems="center">
                          <Typography variant="body1" mr={1}>
                            {site.author_count || 0}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>
                        {(Array.isArray(site.topics) ? site.topics : []).map((topic, index) => (
                          <Chip
                            key={index}
                            label={topic}
                            style={{
                              backgroundColor: colors[index % colors.length],
                              color: '#fff',
                              margin: '2px',
                            }}
                          />
                        ))}
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={site.custom_prompt ? 'Yes' : 'No'}
                          color={site.custom_prompt ? 'success' : 'default'}
                          variant={site.custom_prompt ? 'filled' : 'outlined'}
                        />
                      </TableCell>
                      <TableCell>
                        {site.clientPosts && site.clientPosts.length > 0 ? (
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                            {site.clientPosts.map((clientPost, idx) => (
                              <Chip
                                key={`${site.id}-${clientPost.clientId}`}
                                label={`${clientPost.clientName}: ${clientPost.postCount} posts`}
                                color="primary"
                                variant="outlined"
                                sx={{
                                  margin: '2px',
                                  backgroundColor: colors[idx % colors.length],
                                  color: '#fff',
                                }}
                              />
                            ))}
                          </Box>
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            No client posts
                          </Typography>
                        )}
                      </TableCell>
                      <TableCell>
                        <Box display="flex" flexDirection="column" gap={1}>
                          <IntercomButton
                            variant="primary"
                            size="small"
                            onClick={() => handleEdit(site.id)}
                          >
                            Edit
                          </IntercomButton>
                          <IntercomButton variant="secondary" size="small" color="error">
                            Delete
                          </IntercomButton>
                          {site.login && (
                            <IntercomButton
                              variant="secondary"
                              size="small"
                              onClick={() => handleWPLogin(site)}
                            >
                              WordPress
                            </IntercomButton>
                          )}
                          <IntercomButton
                            variant="secondary"
                            size="small"
                            onClick={() =>
                              router.push(`/superstar-sites/${site.id}/manage-authors`)
                            }
                          >
                            Authors
                          </IntercomButton>
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </IntercomCard>
        </Grid>
      </Grid>
    </IntercomLayout>
  );
}

export default function SuperstarSites() {
  return (
    <ToastProvider>
      <SuperstarSitesPage />
    </ToastProvider>
  );
}
